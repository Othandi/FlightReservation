package com.mycompany.flightreservationredux;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.sql.Array;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class DataCache {
    private static final String CUSTOMER_FILE_PATH = "F:/Diploma of IT/SEM 2/Stage1_Jose/flightreservationredux/customers_cache.json";
    private static final String BOOKING_FILE_PATH = "F:/Diploma of IT/SEM 2/Stage1_Jose/flightreservationredux/booking_cache.json";

    private Map<Integer, Customer> customerCache;
    private Map<Integer, Booking> bookingCache;

    public DataCache() {
        customerCache = new HashMap<>();
        bookingCache = new HashMap<>();
        loadCacheFromDatabase();
    }

    public void putCustomer(Customer customer) {
        customerCache.put(customer.getId(), customer);
        saveCache(CUSTOMER_FILE_PATH, customerCache);
        try {
            db.addCustomer(customer); // Synchronize with the MySQL database
        } catch (SQLException e) {
            e.printStackTrace(); // Handle synchronization error
        }
    }

    public Customer getCustomer(int id) {
        return customerCache.get(id);
    }

    public void removeCustomer(int id) {
        customerCache.remove(id);
        saveCache(CUSTOMER_FILE_PATH, customerCache);
        try {
            db.deleteCustomer(id); // Synchronize with the MySQL database
        } catch (SQLException e) {
            e.printStackTrace(); // Handle synchronization error
        }
    }

    public ArrayList<Customer> getAllCustomers() {
        return new ArrayList<>(customerCache.values());
    }

    public void putBooking(Booking booking) {
        bookingCache.put(booking.getId(), booking);
        saveCache(BOOKING_FILE_PATH, bookingCache);
        try {
            db.addBooking(booking); // Synchronize with the MySQL database
        } catch (SQLException e) {
            e.printStackTrace(); // Handle synchronization error
        }
    }

    public Booking getBooking(int id) {
        return bookingCache.get(id);
    }

    public void removeBooking(int id) {
        bookingCache.remove(id);
        saveCache(BOOKING_FILE_PATH, bookingCache);
        try {
            db.deleteBooking(id); // Synchronize with the MySQL database
        } catch (SQLException e) {
            e.printStackTrace(); // Handle synchronization error
        }
    }

    public ArrayList<Booking> getAllBookings() {
        return new ArrayList<>(bookingCache.values());
    }

    public void refreshCustomerCache(){
        ArrayList<Customer> customers = db.getCustomers();
        customerCache.clear();
        for (Customer customer : customers) {
            customerCache.put(customer.getId(), customer);
        }
    }

    public void refreshBookingCache(){
        ArrayList<Booking> bookings = db.getBookings();
        bookingCache.clear();
        for (Booking booking : bookings) {
            bookingCache.put(booking.getId(), booking);
        }
    }

    private void loadCache() {
        ObjectMapper mapper = new ObjectMapper();
        try {
            File customerFile = new File(CUSTOMER_FILE_PATH);
            if (customerFile.exists()) {
                customerCache = mapper.readValue(customerFile, mapper.getTypeFactory().constructMapType(HashMap.class, Integer.class, Customer.class));
            }
            File bookingFile = new File(BOOKING_FILE_PATH);
            if (bookingFile.exists()) {
                bookingCache = mapper.readValue(bookingFile, mapper.getTypeFactory().constructMapType(HashMap.class, Integer.class, Booking.class));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void saveCache(String filePath, Map<Integer, ?> cache) {
        ObjectMapper mapper = new ObjectMapper();
        try {
            File file = new File(filePath);
            file.getParentFile().mkdirs(); // Create parent directories if they do not exist
            mapper.writeValue(file, cache);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadCacheFromDatabase() {
        ArrayList<Customer> customers = db.getCustomers();
        for (Customer customer : customers) {
            customerCache.put(customer.getId(), customer);
        }

        ArrayList<Booking> bookings = db.getBookings();
        for (Booking booking : bookings) {
            bookingCache.put(booking.getId(), booking);
        }
    }
}
